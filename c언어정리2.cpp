/* 
	문자열
	문자열은 char로 쓴다. char a = 'abc';
	char 함수에 [숫자]를 써서 표현할 수 있다. / char a[20]; 
	문자열을 비교할때는 strcmp(a,b)로 쓴다.
	문자열 길이는 strlen(a)을 쓴다. 
	
	문자열 정수 변환
	char인 문자열을 정수로 바꿔주는데,
	문자열에서 48를 빼면 정수로 바꿀 수 있다. 아스키코드 참고. 
	atoi(); : 아스키코드를 정수로 바꿔주는 함수 
	itoa(); : 정수를 아스키코드로 바꿔주는 함수 
	
	구조체
	typedef 이라는 함수를 사용하는데, typedef를 사용함으로서
	main 함수에서 정의된 typedef 함수를 호출하여,
	 함수를 쉽게 불러 올 수 있다는 장점이 있다.
	정의: typedef struct k{
		char a[20];
		int b;
	}a;
	불러올때: struct k A; , typedef 안의 함수에 저장하거나
	불러오기 위해 A.a 와 A.b 형태로 나타난다. 
	
	사용자 정의 함수
	사용자 정의함수에는 2가지 방법이 있는데, 1가지 방법은 void함수를
	사용하는 것이다. void는 매개함수라고도 한다. 다른 한가지 방법은
	int,float,char 등을 사용할 수 있다.
	예시 : int 이름(int a, int b){} / 불러올때는 : int k = 이름(); 
	
	1. 함수선언+정의 -> 호출 (main위에서 ), 함수 순서도 맞춰야 함 
	2. 함수 선언 -> 호출 -> 정의 (메안 아래서 정의)  함수 순서를 맞출 필요가 없음
	 
	 
	재귀 함수
	재귀 함수는 하나의 사용자 정의 함수에서 그 사용자함수를 계속
	불러옴으로써 값을 계산하는 방법이다. 계산하는 속도가 느릴 수 있다는
	단점이 있다. 장점은 표현의 효율성이다. 코드가 간단해서 보기가 쉽다. 
	
	포인터
	포인터는 함수 이름 앞에 *를 붙여서 표현할 수 있다.
	&는 주소값이라고 한다. 예시: int *a; 
	포인터는  데이터와 데이터와의 연결을 자연스럽게 해준다는 장점이 있다.
	동적할당된 메모리에 쉽게 연결할 수 있다는 장점도 있다. 
	
	
	동적할당
	임의로 함수로 삭제를 하지 못하는데, 동적할당은 임의로 삭제할 수 있다는
	장점이 있다.  
	동적할당은 어떠한 함수에 일정한 byte 크기를 정해주어
	메모리를 관리할 수 있다는 장점이 있다. 
	malloc 이라는 함수를 사용하여 지정해줄 수 있으며, 
	sizeof 함수를 통해서 그 함수의 byte 크기를 불러 올 수 있다. 
	포인터와 동적할당을 사용해서 int *A = malloc(sizeof(int));
	
	
	
	배열 포인터
	배열 포인터는 배열에 포인터를 붙이는 것이다.
	배열 포인터를 통해서 배열의 크기를 효율적으로 저장할 수 있다는 장점이 있다. 
	A라는 배열이 있을때, A[20] 앞에 *를 붙이고 malloc 함수를 통해서 크기를 정해준다. 
	int *A[20] = malloc(sizeof(int)*20);
	
	사용자 함수 포인터
	사용자 함수 포인터는 사용자 함수를 호출한뒤, int a(int *a)
	포인터를 사용해 입출력과 같은 일을 해주는 것이다.
	포인터로 가리키는 메모리는 포인터 값이 바뀌면
	그 메모리의 실제값도 반영된다.
	 
	 
	연결리스트 단방향, 양방향 
	연결리스트를 통해서 다음의 데이터는 무엇인지, 그 전의 데이터는 무엇인지
	간결하게 알아볼 수 있다는 장점이 있다. 
	
	연결리스트 단방향은 next만 있는 것인데, 포인터를 이용하여
	head, node, tail 3부분으로 나누어 처리할 수 있다. typedef을 같이 사용하게 되는데,
	next를 사용하여 다음 위치를 지정해줄 수 있다.
	연결리스트 양방향은 prev와 next가 동시에 있는 것인데, 포인터를 이용하여
	prev를 쓰면 그 전 위치를 지정해줄 수 있다. 
	
	
	자료구조 큐
	자료구조는 큐는 2가지로 나뉘어진다. pop과 push가 존재한다.
	pop은 자료를 삭제할 때 사용하며, push는 자료를 추가할 때 사용한다. 
	push는 정수 x를 입력한뒤 큐에 x를 추가하며
	pop은 큐의 첫번째 값을 삭제하고 앞으로 당긴다.
	0을 입력하기 전까지 pop과 push를 반복하게 된다. 
	
	자료구조 스택
	자료구조 스택은 자료구조 큐와 달리 최근에 들어간 순서대로 진행된다.
	pop에서 idx를 하나씩 줄여가는 것만으로 자료구조 스택이 된다. 
	 
	2진수 10진수
	10진수를 2진수로 바꾸는 방법의 예시: 10은
	13
	2	1
	6	0
	3	1
	1
	1101로 표현할 수 있다. 2로 계속 나누면서 나머지가 생길때 나머지를 뒤에서부터
	쓰면 된다. 
	2진수를 10진수로 바꾸는 방법 예시: 1001001
	기존 숫자:			1001001
	역순으로 숫자 쓰기: 6543210
	1이 있는 곳에 2의 제곱*숫자자리, 2의 0승 + 2의 3승 +  2의 6승 = 1+8+64=73
*/

